
==================== FINAL INTERFACE ====================
2016-02-21 16:36:18.4087513 UTC

interface main@main:Main 7103
  interface hash: ca37e5483af6f8ad550bc0e0ef41745b
  ABI hash: bba1aa1436f714e0c04eb0c8e5a4d6df
  export-list hash: 40be3d3d22ba9191c5d13fe39c4f9573
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 8eff9b01e7de8b86316f31b868a3250b
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.decode
  Main.deserialize
  Main.getLutEncoded
  Main.idxsEncodedOffset
  Main.listToHex
  Main.lookUpIdxs
  Main.lutEncodedOffset
  Main.main
  Main.RleEntry{Main.Code Main.Raw Main.len Main.val}
module dependencies:
package dependencies: array-0.5.1.0@array_67iodizgJQIIxYVTp4emlA
                      base-4.8.2.0* bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6*
                      deepseq-1.4.1.1@deeps_6vMKxt5sPFR0XsbRWvvq59 ghc-prim-0.4.0.0
                      integer-gmp-1.0.0.0 mtl-2.2.1@mtl_Aue4leSeVkpKLsfHIV51E8
                      split-0.2.3@split_CDzOynTh4l8Ahg1HaWUL4Z
                      transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF
orphans: base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
         transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF:Control.Monad.Trans.Error
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Functor.Identity
                         base-4.8.2.0:Data.Monoid base-4.8.2.0:Data.Type.Equality
                         base-4.8.2.0:Data.Void base-4.8.2.0:GHC.Generics
import  -/  base-4.8.2.0:Control.Arrow 0c552df08378559be87a709d2820fffa
import  -/  base-4.8.2.0:Data.Bits 87f514c5f0e66e224843da33c04aa38b
import  -/  base-4.8.2.0:Data.Foldable 2ce969969ad5231eb40bd713f94f05ad
import  -/  base-4.8.2.0:Data.List 3f0782c8d4bf50eecefcd5ea1798aac8
import  -/  base-4.8.2.0:Data.Word ec8deb535202352cc8b509b14004bcbd
import  -/  base-4.8.2.0:GHC.Base a4939789b2cfd60b36ed163e56a623cd
import  -/  base-4.8.2.0:GHC.List 0c736920522bbd14b770342776012ab6
import  -/  base-4.8.2.0:GHC.Num 9f42750c866f5832ca565146bd660c60
import  -/  base-4.8.2.0:GHC.Real 1281efa9baf803bc7859d7efb89a38b3
import  -/  base-4.8.2.0:GHC.Show 0e1d8380a8fb0cfb07ebeda3b70cbf38
import  -/  base-4.8.2.0:GHC.Word 10dc88543d98000abab9695a1019767d
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  base-4.8.2.0:Text.Printf 0276d4e7547f991f04a90f6b1e7f1f46
import  -/  bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6:Data.ByteString.Lazy 59e7973423198e93620da16e5f7527dd
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
import  -/  ghc-prim-0.4.0.0:GHC.Types 6b27fb3fdbd0e3f0925a4496c66513bb
import  -/  mtl-2.2.1@mtl_Aue4leSeVkpKLsfHIV51E8:Control.Monad.Except a48c40e49a1635a6f6c139e86212e5c9
import  -/  split-0.2.3@split_CDzOynTh4l8Ahg1HaWUL4Z:Data.List.Split 0ce5c537605fc9ad887ec02865b54394
import  -/  split-0.2.3@split_CDzOynTh4l8Ahg1HaWUL4Z:Data.List.Split.Internals 4ea5a9e5367ae0648c6ecbbc653cbd5b
bf2b71db01905b89412ee99b1804d185
  $fShowRleEntry :: GHC.Show.Show Main.RleEntry
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.RleEntry
                  Main.$fShowRleEntry_$cshowsPrec
                  Main.$fShowRleEntry_$cshow
                  Main.$fShowRleEntry_$cshowList -}
bf2b71db01905b89412ee99b1804d185
  $fShowRleEntry1 :: Main.RleEntry -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ w :: Main.RleEntry w1 :: GHC.Base.String ->
                 Main.$w$cshowsPrec 0 w w1) -}
5ed04ce684b10ac13101118f65de4d30
  $fShowRleEntry2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Code {"#) -}
01849cf5f1338a7813b9eeb3222fb4b6
  $fShowRleEntry3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "}"#) -}
c3293fe85e6489fe7f53eb4a18066187
  $fShowRleEntry4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "val = "#) -}
5348b30bd1df9f7fc0e4af7d16c63d4d
  $fShowRleEntry5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# ", "#) -}
ec294b7586739a29cbb2b0d848a6ab35
  $fShowRleEntry6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "len = "#) -}
a03c59257cba39263804f15a3256456a
  $fShowRleEntry7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Raw "#) -}
bf2b71db01905b89412ee99b1804d185
  $fShowRleEntry_$cshow :: Main.RleEntry -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: Main.RleEntry ->
                 Main.$fShowRleEntry_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
bf2b71db01905b89412ee99b1804d185
  $fShowRleEntry_$cshowList :: [Main.RleEntry] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Main.RleEntry
                   Main.$fShowRleEntry1) -}
bf2b71db01905b89412ee99b1804d185
  $fShowRleEntry_$cshowsPrec ::
    GHC.Types.Int -> Main.RleEntry -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,1*U(U)><S,1*U><L,U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: GHC.Types.Int w1 :: Main.RleEntry w2 :: GHC.Base.String ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Main.$w$cshowsPrec ww1 w1 w2 }) -}
aab32dfc04bfc7543cba90a75c7c789c
  $sprintf3 ::
    GHC.Base.String -> [Text.Printf.UPrintf] -> [GHC.Types.Char]
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: (\ fmts1 :: GHC.Base.String
                   args :: [Text.Printf.UPrintf] ->
                 GHC.Base.map
                   @ GHC.Types.Char
                   @ GHC.Types.Char
                   Text.Printf.$fIsCharChar_$cfromChar
                   (Text.Printf.uprintfs
                      fmts1
                      (GHC.List.reverse1
                         @ Text.Printf.UPrintf
                         args
                         (GHC.Types.[] @ Text.Printf.UPrintf))
                      (GHC.Types.[] @ GHC.Types.Char))) -}
bf2b71db01905b89412ee99b1804d185
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> Main.RleEntry -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <L,U><S,1*U><L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   w :: Main.RleEntry
                   w1 :: GHC.Base.String ->
                 case w of wild {
                   Main.Raw b1
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11) of wild1 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             Main.$fShowRleEntry7
                             (GHC.Show.showList__ @ GHC.Word.Word8 GHC.Word.$fShowWord4 b1 w1)
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Main.$fShowRleEntry7
                                (GHC.Show.showList__
                                   @ GHC.Word.Word8
                                   GHC.Word.$fShowWord4
                                   b1
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w1))) }
                   Main.Code b1 b2
                   -> let {
                        g :: GHC.Base.String -> GHC.Base.String
                          {- Arity: 1, Strictness: <L,1*U> -}
                        = \ x :: GHC.Base.String[OneShot] ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            Main.$fShowRleEntry6
                            (case b1 of ww2 { GHC.Types.I# ww3 ->
                             case GHC.Show.$wshowSignedInt
                                    0
                                    ww3
                                    (GHC.Base.++
                                       @ GHC.Types.Char
                                       Main.$fShowRleEntry5
                                       (GHC.Base.++
                                          @ GHC.Types.Char
                                          Main.$fShowRleEntry4
                                          (case b2 of wild1 { GHC.Word.W8# x# ->
                                           let {
                                             ww1 :: GHC.Prim.Int# = GHC.Prim.word2Int# x#
                                           } in
                                           case GHC.Prim.tagToEnum#
                                                  @ GHC.Types.Bool
                                                  (GHC.Prim.<# ww1 0) of wild2 {
                                             GHC.Types.False
                                             -> case GHC.Show.$witos
                                                       ww1
                                                       (GHC.Base.++
                                                          @ GHC.Types.Char
                                                          Main.$fShowRleEntry3
                                                          x) of ww4 { (#,#) ww5 ww6 ->
                                                GHC.Types.: @ GHC.Types.Char ww5 ww6 }
                                             GHC.Types.True
                                             -> case GHC.Show.$witos
                                                       ww1
                                                       (GHC.Base.++
                                                          @ GHC.Types.Char
                                                          Main.$fShowRleEntry3
                                                          x) of ww4 { (#,#) ww5 ww6 ->
                                                GHC.Types.:
                                                  @ GHC.Types.Char
                                                  ww5
                                                  ww6 } } }))) of ww4 { (#,#) ww5 ww6 ->
                             GHC.Types.: @ GHC.Types.Char ww5 ww6 } })
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11) of wild1 {
                        GHC.Types.False
                        -> GHC.Base.++ @ GHC.Types.Char Main.$fShowRleEntry2 (g w1)
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Main.$fShowRleEntry2
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w1))) } }) -}
bf2b71db01905b89412ee99b1804d185
  data RleEntry
    = Raw [GHC.Word.Word8]
    | Code {len :: GHC.Types.Int, val :: GHC.Word.Word8}
cc653335109380168e2d1ff77c43d9b2
  decode :: [Main.RleEntry] -> [GHC.Word.Word8]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
e4d39e6c6bffd1f56edd6d5d20d74aef
  deserialize :: [GHC.Word.Word8] -> [Main.RleEntry]
  {- Arity: 1, Strictness: <S,1*U> -}
0d162f99538d3faf43da16be7f22bd18
  getLutEncoded :: [GHC.Word.Word8] -> [GHC.Word.Word8]
  {- Arity: 1, Strictness: <S,1*U> -}
38831bc6d830543a4847e58a64400dc8
  idxsEncodedOffset :: GHC.Int.Int64
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Int.I64# 142080) -}
d96391eab1b44ce0393f4b2c55216e21
  len :: Main.RleEntry -> GHC.Types.Int
  RecSel Main.RleEntry
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Main.RleEntry ->
                 case ds of wild {
                   Main.Raw ipv -> Main.len1 Main.Code ds1 ds2 -> ds1 }) -}
176f13b1a81269e501ee2852e11f1275
  len1 :: GHC.Types.Int
  {- Strictness: b -}
f5555156e3fb30222eb79a5f627eefbf
  listToHex :: [GHC.Word.Word8] -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: (\ xs :: [GHC.Word.Word8] ->
                 GHC.CString.unpackAppendCString# "["# (Main.listToHex_go xs)) -}
ecd0f9b9939553225d6cd79a948aca99
  listToHex_go :: [GHC.Word.Word8] -> [GHC.Types.Char]
  {- Arity: 1, Strictness: <S,1*U> -}
349053ffc68d35904d09e0af45563d3a
  lookUpIdxs ::
    [GHC.Types.Int] -> [[GHC.Word.Word8]] -> [GHC.Word.Word8]
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: (\ idxs :: [GHC.Types.Int] lut :: [[GHC.Word.Word8]] ->
                 letrec {
                   go :: [GHC.Types.Int] -> [GHC.Word.Word8]
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ ds :: [GHC.Types.Int] ->
                     case ds of wild {
                       [] -> GHC.Types.[] @ GHC.Word.Word8
                       : y ys
                       -> case y of ww { GHC.Types.I# ww1 ->
                          GHC.Base.++
                            @ GHC.Word.Word8
                            (GHC.List.$w!! @ [GHC.Word.Word8] lut ww1)
                            (go ys) } }
                 } in
                 go idxs) -}
e2014d3aa42e2c6b1b9c0a57b0a42ee6
  lutEncodedOffset :: GHC.Int.Int64
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Int.I64# 142590) -}
ee6590a2ab0ffaa5074d93f2d3fc4c03
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
e3bd864fe81295cabb6b36ca45539f6f
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <L,U> -}
e0cb4c8d876273838c3b9b94e525a859
  main2 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R))) -}
879c6c7132626a4df138f181c40e7ad8
  val :: Main.RleEntry -> GHC.Word.Word8
  RecSel Main.RleEntry
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Main.RleEntry ->
                 case ds of wild {
                   Main.Raw ipv -> Main.val1 Main.Code ds1 ds2 -> ds2 }) -}
48a1ee722addcfaa3bd77bc436c59385
  val1 :: GHC.Word.Word8
  {- Strictness: b -}
instance GHC.Show.Show [Main.RleEntry] = Main.$fShowRleEntry
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

